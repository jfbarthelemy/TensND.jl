name: CI

on:
  push:
  pull_request:

jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.10'
          - '1'
          - 'nightly'
        os:
          # - ubuntu-latest
          - windows-latest
        arch:
          - x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}

      - name: Cache Julia artifacts
        uses: actions/cache@v4
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-

      - name: Install dependencies on Ubuntu
        if: runner.os == 'Linux'
        run: |
          julia -e '
            using Pkg; Pkg.add("PyCall"); Pkg.add("SymPy")
            Pkg.add("Conda"); using Conda; Conda.add("sympy")
            ENV["PYTHON"] = "/usr/bin/python3"; Pkg.build("PyCall")
            using PyCall; pyimport_conda("sympy", "sympy")'

      - name: Install dependencies on Windows
        if: runner.os == 'Windows'
        run: |
          julia -e '
            using Pkg; Pkg.add("PyCall"); Pkg.add("SymPy")
            ENV["PYTHON"] = ""; Pkg.build("PyCall")
            using PyCall; pyimport_conda("sympy", "sympy")'

      - name: Build package
        uses: julia-actions/julia-buildpkg@v1

      - name: Run tests
        uses: julia-actions/julia-runtest@v1

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: '1'

      - run: |
          julia --project=docs -e '
            using Pkg
            Pkg = Base.require(Base.PkgId(Base.UUID(0x44cfe95a1eb252eab672e2afdf69b78f), "Pkg"))
            Pkg.develop(PackageSpec(path=pwd()))
            ENV["PYTHON"] = ""
            Pkg.build("PyCall")
            Pkg.instantiate()'

      - run: |
          julia --project=docs -e '
            using Documenter: DocMeta, doctest
            using TensND
            docmeta = quote
                import Pkg; Pkg.add("Tensors")
                import Pkg; Pkg.add("OMEinsum")
                import Pkg; Pkg.add("Rotations")
                using LinearAlgebra, SymPy, Tensors, OMEinsum, Rotations, TensND
            end
            DocMeta.setdocmeta!(TensND, :DocTestSetup, docmeta; recursive=true)
            doctest(TensND)'

      - run: julia --project=docs --color=yes -e 'using Pkg; Pkg.instantiate(); include("docs/make.jl")'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
