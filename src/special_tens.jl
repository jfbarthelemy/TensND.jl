"""
    fœµ(T, i::Int, j::Int, k::Int)
    fœµ(i::Int, j::Int, k::Int) = fœµ(Int, i::Int, j::Int, k::Int)

Function giving Levi-Civita symbol `œµ·µ¢‚±º‚Çñ = (i-j) (j-k) (k-i) / 2`
"""
fœµ(i::Int, j::Int, k::Int, ::Type{<:T} = Int) where {T} = T(T((i-j)*(j-k)*(k-i))/T(2))

"""
    œµ[i,j,k]

Levi-Civita symbol `œµ·µ¢‚±º‚Çñ=(i-j)(j-k)(k-i)/2`
"""
const œµ = [fœµ(i,j,k) for i=1:3, j=1:3, k=1:3]



tensId2(T::Type{<:Number} = Sym, dim = 3) = Tensnd(one(SymmetricTensor{2, dim, T}), (:cont, :cont), CanonicalBasis{dim,T}())

tensId4(T::Type{<:Number} = Sym, dim = 3) = Tensnd(one(Tensor{4, dim, T}), (:cont, :cont, :cont, :cont), CanonicalBasis{dim,T}())

tensId4s(T::Type{<:Number} = Sym, dim = 3) = Tensnd(one(SymmetricTensor{4, dim, T}), (:cont, :cont, :cont, :cont), CanonicalBasis{dim,T}())

function tensJ4(T::Type{<:Number} = Sym, dim = 3)
    Œ¥ = one(SymmetricTensor{2, dim, T})
    return Tensnd(Œ¥‚äóŒ¥/dim, (:cont, :cont, :cont, :cont), CanonicalBasis{dim,T}())
end

tensK4(T::Type{<:Number} = Sym, dim = 3) = tensId4s(T, dim) - tensJ4(T, dim)

const ùüè = tensId2
const ùüô = tensId4
const ùïÄ = tensId4s
const ùïÅ = tensJ4
const ùïÇ = tensK4
