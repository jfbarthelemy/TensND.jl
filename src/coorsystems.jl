abstract type AbstractCoorSystem{dim,T<:Number} <: Any end


"""
    ‚àÇ(t::AbstractTensnd{order,dim,Sym,A},x·µ¢::Sym)

Returns the derivative of the tensor `t` with respect to the variable `x_i`

# Examples
```julia

julia> Œ∏, œï, ‚Ñ¨À¢, ùêû·∂ø, ùêû·µ†, ùêû ≥ = init_spherical(symbols("Œ∏ œï", real = true)...) ;

julia> ‚àÇ(ùêû ≥, œï) == sin(Œ∏) * ùêû·µ†
true

julia> ‚àÇ(ùêû ≥ ‚äó ùêû ≥,Œ∏)
TensND.TensndRotated{2, 3, Sym, SymmetricTensor{2, 3, Sym, 6}}
# data: 3√ó3 SymmetricTensor{2, 3, Sym, 6}:
 0  0  1
 0  0  0
 1  0  0
# basis: 3√ó3 Tensor{2, 3, Sym, 9}:
 cos(Œ∏)‚ãÖcos(œï)  -sin(œï)  sin(Œ∏)‚ãÖcos(œï)
 sin(œï)‚ãÖcos(Œ∏)   cos(œï)  sin(Œ∏)‚ãÖsin(œï)
       -sin(Œ∏)        0         cos(Œ∏)
# var: (:cont, :cont)
```
"""
‚àÇ(t::AbstractTensnd{order,dim,Sym,A}, x·µ¢::Sym) where {order,dim,A} =
    change_tens(Tensnd(diff.(components_canon(t), x·µ¢)), getbasis(t), getvar(t))

‚àÇ(t::Sym, x·µ¢::Sym) = diff(t, x·µ¢)

"""
    init_canonical(coords = symbols("x y z", real = true))

Returns the coordinates, base vectors and basis of the canonical basis

# Examples
```julia
julia> coords, vectors, ‚Ñ¨ = init_canonical() ; x, y, z = coords ; ùêû‚ÇÅ, ùêû‚ÇÇ, ùêû‚ÇÉ = vectors ;
``` 
"""
init_canonical(coords = symbols("x y z", real = true)) = Tuple(coords),
ntuple(i -> ùêû(i, length(coords), eltype(coords)), length(coords)),
CanonicalBasis{length(coords),eltype(coords)}()

init_canonical(::Val{3}) = init_canonical(symbols("x y z", real = true))
init_canonical(::Val{2}) = init_canonical(symbols("x y", real = true))
init_canonical(dim::Int = 3) = init_canonical(Val(dim))



"""
    init_polar(Œ∏ ; canonical = false)

Returns the coordinates, base vectors and basis of the polar basis

# Examples
```julia
julia> coords, vectors, ‚Ñ¨·µñ = init_polar() ; r, Œ∏ = coords ; ùêû ≥, ùêû·∂ø = vectors ;
``` 
"""
init_polar(coords = (symbols("r", positive = true), symbols("Œ∏", real = true)); canonical = false) =
    Tuple(coords), ntuple(i -> ùêû·µñ(i, coords[2]; canonical = canonical), 2), Basis(coords[2])

"""
    init_cylindrical(coords = (symbols("r", positive = true), symbols("Œ∏", real = true), symbols("z", real = true)); canonical = false)

Returns the coordinates, base vectors and basis of the cylindrical basis

# Examples
```julia
julia> coords, vectors, ‚Ñ¨·∂ú = init_cylindrical() ; r, Œ∏, z = coords ; ùêû ≥, ùêû·∂ø, ùêû·∂ª = vectors ;
``` 
"""
init_cylindrical(coords = (symbols("r", positive = true), symbols("Œ∏", real = true), symbols("z", real = true)); canonical = false) =
    Tuple(coords), ntuple(i -> ùêû·∂ú(i, coords[2]; canonical = canonical), 3), CylindricalBasis(coords[2])



"""
    init_spherical(coords = (symbols("Œ∏", real = true), symbols("œï", real = true), symbols("r", positive = true)); canonical = false)

Returns the coordinates, base vectors and basis of the spherical basis.
Take care that the order of the 3 vectors is `ùêû·∂ø, ùêû·µ†, ùêû ≥` so that
the basis coincides with the canonical one when the angles are null and in consistency
the coordinates are ordered as `Œ∏, œï, r`.

# Examples
```julia
julia> coords, vectors, ‚Ñ¨À¢ = init_spherical() ; Œ∏, œï, r = coords ; ùêû·∂ø, ùêû·µ†, ùêû ≥  = vectors ;
``` 
"""
init_spherical(coords = (symbols("Œ∏", real = true), symbols("œï", real = true), symbols("r", positive = true)); canonical = false) =
    Tuple(coords), ntuple(i -> ùêûÀ¢(i, coords[1:2]...; canonical = canonical), 3), SphericalBasis(coords[1:2]...)


"""
    init_rotated(coords = symbols("Œ∏ œï œà", real = true); canonical = false)

Returns the angles, base vectors and basis of the rotated basis.
Note that here the coordinates are angles and do not represent a valid parametrization of `‚Ñù¬≥`

# Examples
```julia
julia> angles, vectors, ‚Ñ¨ ≥ = init_rotated() ; Œ∏, œï, œà = angles ; ùêû·∂ø, ùêû·µ†, ùêû ≥ = vectors ;
```
"""
init_rotated(angles = symbols("Œ∏ œï œà", real = true); canonical = false) =
    Tuple(angles), ntuple(i -> ùêûÀ¢(i, angles...; canonical = canonical), 3), Basis(angles...)


struct CoorSystemSym{dim} <: AbstractCoorSystem{dim,Sym}
    OM::AbstractTensnd{1,dim,Sym}
    coords::NTuple{dim,Sym}
    basis::AbstractBasis{dim,Sym}
    bnorm::AbstractBasis{dim,Sym}
    a·µ¢::NTuple{dim,AbstractTensnd}
    a‚Å±::NTuple{dim,AbstractTensnd}
    e·µ¢::NTuple{dim,AbstractTensnd}
    function CoorSystemSym(
        OM::AbstractTensnd{1,dim,Sym},
        coords::NTuple{dim,Sym};
        simp::Dict = Dict(),
    ) where {dim}
        var = getvar(OM)
        ‚Ñ¨ = getbasis(OM)
        a·µ¢ = ntuple(i -> ‚àÇ(OM, coords[i]), dim)
        e = Tensor{2,dim}(hcat(components.(a·µ¢)...))
        # g = SymmetricTensor{2,dim}(simplify.(e' ‚ãÖ e))
        # G = inv(g)
        # E = e ‚ãÖ G'
        E = inv(e)'
        a‚Å± = ntuple(i -> Tensnd(E[:, i], ‚Ñ¨, invvar.(var)), dim)
        basis = Basis(simplify.(subs.(simplify.(hcat(components_canon.(a·µ¢)...)), simp...)))
        e·µ¢ = ntuple(
            i -> Tensnd(
                simplify.(subs.(simplify.(a·µ¢[i] / norm(a·µ¢[i])), simp...)),
                ‚Ñ¨,
                invvar.(var),
            ),
            dim,
        )
        bnorm = Basis(simplify.(subs.(simplify.(hcat(components_canon.(e·µ¢)...)), simp...)))
        new{dim}(OM, coords, basis, bnorm, a·µ¢, a‚Å±, e·µ¢)
    end
end
